{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Consolas;\f2\fnil\fcharset0 Consolas-Bold;
\f3\fnil\fcharset0 OpenSans;}
{\colortbl;\red255\green255\blue255;\red26\green27\blue29;\red234\green234\blue234;\red40\green40\blue40;
\red255\green255\blue255;\red58\green113\blue169;\red71\green170\blue64;\red67\green67\blue67;\red135\green135\blue135;
\red100\green100\blue100;}
\margl1440\margr1440\vieww5800\viewh12680\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
{\field{\*\fldinst{HYPERLINK "https://www.udemy.com/ruby-on-rails-build-a-craigslist-clone/learn/"}}{\fldrslt 
\f0\fs24 \cf0 https://www.udemy.com/ruby-on-rails-build-a-craigslist-clone/learn/}}
\f0\fs24 \
(login with google plus)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul \ulc0 LESSON 1
\b0\fs40 \

\fs24 \ulnone We won\'92t use scaffolding\
We will use devise for user authentication\
Everything else will be from scratch\
\
\'95 We won\'92t cover css, html, javascrtip, git or heroku\
(Take those courses later)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul \ulc0 LESSON 2\

\b0\fs26 \ulnone He is using ruby 2.1.1.76\
Rails he\'92s using 4.1.0
\fs30 \

\fs26 I am on rails 4.2.5\
I am on Ruby 2.1.1.85\
Hopefully there is no issue
\fs30 \
\

\b\fs54 \ul LESSON 3\

\b0\fs26 \ulnone rails new boblist\
figure the database structure out first\
\
rails g migration initial_schema\
add fields to migration you want\
rake db:migrate\
\

\b\fs54 \ul LESSON 4\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone Create models for listing, category and subcategory\
\
category has may subcategories\
a subcategory belongs to a listing\
category has many listings\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 5\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone Now we need controllers\
create them for listing, category, subcategory\
\
Set root path\
root 'categories#index'\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 6\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone Copy and paste the html in from the sample file\
Now you can see the hello world has a \'93craigslist feel\'94\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 7\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone We can make our static pages\
Create a pages controller\
(we don\'92t need a model for it since we aren\'92t saving anything to these pages)\
\
Routes file needs a path to pages controller\
match '/help', to: 'pages#help', via: :get\
Make all your static pages\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 8\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone Now we need to create categories\
In routes add resources :categories\
(create all crud actions)\
\
We want our route to look like:\
/community/activities\
\
We need a nested route\
resources :categories do\
	resources :subcategories\
end\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 9\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone Seed Data\
Categories are set in stone\
\
Go to seeds.rb\
rake db:seed will create everything\
\
Here\'92s how you do that:\
community_category = Category.where(name: \'91community\'92).first_or_create(name: \'91community\'92)\
\

\i this is saying find a category where the name is community, and if it\'92s not there then see if it\'92s the first category to have the name of community and if it\'92s not, then name it community\
\

\i0 Subcategory.where(name: 'activities', category_id: community_category.id).first_or_create(name: 'activities', category_id: community_category.id)\
\

\i This is the same except we are tying our category id to the community category id\
\
This looks for an activities subcategory and if it does find it, it does nothing, but if it doesn\'92t find it, it creates it\
\

\i0 rake db:seed\
\
Validate it is there by going to rails c\
\
(note to bob, double quotes worked but singles didn\'92t)\
\
Also check if it\'92s there in console:\
Category.all\
and\
Subcategory.all\
\

\b Now I will add as many subcategories\

\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 10
\b0\fs28 \ulnone \
run rake db:seed for all your categories and subcategories\
\
to put that data on our homepage\
go to categories controller\
go to index method\
\
def index\
@categories = Category.all\
@community = @categories[0]\
end\
\
Then go to index html view file\
<%= link_to \'91community\'92 %>\
\
We also have to show subcategories\
\
            <% @community.subcategories.each do |subcategory| %>\
            <ul class="left-list">\
              <li><%= link_to subcategory.name %></li>\
            </ul>\
            <% end %>\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i \cf0 This targets all community subcategories and loops through and shows the name for each one\
\

\i0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 11\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone Now when you click on a category or subcategory, we want the app to take us there\
\
Let\'92s make a path that takes us somewhere\
When we click on community we want to see all of our listings\
We want to click on category show action\
          <th class="table-header"><%= link_to "community", category_path(@community) %></th>\
\
This takes us to the community show page\
We want it to show us the community category so that\'92s why we passed in @community\
\
In show action we need:\
This show is really the show of the listings\
So we want to use the search.html template here\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 12\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone Now we will make subcategories\
URL will be:\
categories/1/subcategories/12\
This is because a subcategory belongs to a category\
\
link_to subcategory.name, category_subcategory(@community, subcategory)\
We need two parameters because it needs the community id and the subcategory id\
\
put a show action in our subcategory controller\
make a subcategories folder and put a show view file in it\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 13\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone CRUD listings\
Now we want to create the listings\
We want to make the post to classifieds list work\
\
Go to routes.rb and add\
resources :listings\
Now we have crud actions for listings\
\
      <%= link_to "post to classifieds", new_listing_path %>\
\
go to listings controller\
def new\
@listing = Listing.new\
end\
\
and add new.html.erb in listings views\
\
We will put in our html template\
Now we have a form (just the html)\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 14
\b0\fs28 \ulnone \
Create listings\
Go to new.html.erb\
\
Make a form_for\
<%= form_for @listing do |f| %>\
<%= f.label :title %>\
<%= f.text_field :title %>\
<%= f.label :description %>\
<%= f.text_area :description %>\
<%= f.label :city %>\
<%= f.text_field :city %>\
<%= f.label :province %>\
<%= f.text_field :province %>\
<%= f.label :zipcode %>\
<%= f.text_field :zipcode, class: "zip-width", maxlength: "6" %>\
<%= f.submit class: "create-button" %>\
<% end %>\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 Need a create action
\b0 \
def create\
@listing = Listing.new(listing_params)\
@listing.save\
redirect_to root_path\
end\
\
private\
def listing_params\
params.require(:listing).permit(:title, :description, :city, :province, :zipcode)\
end\
Strong parameteres-pass in only the specific data you want to create this listing\
\
Be sure it created a listing go here:\
{\field{\*\fldinst{HYPERLINK "http://localhost:3000/listings/1"}}{\fldrslt http://localhost:3000/listings/1}}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 15
\b0\fs28 \ulnone \
Show listings\
We want it to show our listing title and make all listing data functional and dynamic\
\
Go to listings controller\
def show\
@listing - Listing.find(params[:id])\
end\
This says go and find the current listing by its id\
\
    <h1 class="listing-header"><%= @listing.title %></h1>\
This says find the listing of this current id\'92s title\
\
To do when it was created\
<%= time_ago_in_words(@listing.created_at) %>\
(time ago in words is a ruby method)\
\
Now we have a dynamic listing\
But how do we get to it? We want to be able to get to it by clicking it\

\b\fs54 \ul \
LESSON 16
\b0\fs28 \ulnone \
We need to add categories and subcategories to our form\
We need a category and subcategory in our form so it associates the listings to those categories\
\
In our listings table, we don\'92t have a column associating a listing to a category or subcategory\
\
We have the associations in the model, but don\'92t have any columns in the database\
\
rails g migration add_category_subcategory_to_listings\
\
Go into the migration file you just made and add these two lines:\
  	add_column :listings, :category_id, :integer\
  	add_column :listings, :subcategory_id, :integer \
rake db:migrate\
\
now in schema under listings you can see category_id and subcategory_id right there\
\
\
Now we want a drop down menu on our form\
<%= f.label :category_id %>\
<%= f.select :category_id, Category.all.map \{ |f| [f.name, f.id]\} %>\
\
But now it looks funny so we surround it in p tags and it looks great.\
\
Now do the same for subcategories\
We are showing all subcategories\
We are going to use javascript so that it only shows the community subcategories when we click on community for example\
\

\b\fs54 \ul LESSON 17
\b0\fs28 \ulnone \
Go to subcategory controller\
\
def find_by_category\
category = Category.find(params[:category_id]\
subcategories = category.subcategories.find_all\
render json: \{ subcategory: subcategories\}\
end\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 We will set all subcategory to subcategories that we found\

\b0 Now we want to go into routes and create a post action for the method we just created\
\
match \'91/subcategories/find_by_category\'92, to: \'91subcategories#find_by_category\'92, via: :post\
\
We now need a javascript file\
make it called listings.js\
paste his javascript into it\
-his javascript is grabbing the category id and passing in the subcategory id\
Then when we get to the selected category, we are going to get all the subcategories with THAT category id\
\
We need to include the javascript at the top of the new.html.erb file\
\
<%= javascript_include_tag 'listings.js' %>\
So now when it loads that page, it will include the javascript listings.js file\
\
Also in our application.js file, we don\'92t want to include this file so we will delete require_tree from that page\
\
Also go into initializers and create a new file called assets.rb\
and type:\
\
Rails.application.config.assets.precompile += %w( listings.js )\
\
Now go back to our new form and change subcategory select to\
\
:subcategory_id, options_for_select([])\
\
We made a mistake in our controller, this should be:\
def find_by_category\
category = Category.find(params[:category_id])\
subcategories = category.subcategories.find_all\
render json: \{ subcategories: subcategories\}\
end\
\
Essentially we are getting all the subcategories related to the category id\
then we are passing that data onto our form\
into the empty array\
\
We have to include it on the page and precompile it in the initializer so it is loaded whenever we do visit the form\
\

\b So an overview again:\

\b0 Make a method in the controller called find_by_category\
find all categories by their category id\
Then find all subcategories related to that category\
Then render json and set all subcategories to the value we just created in the controller (which was all subcategories related to that category_id)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 def find_by_category\
category = Category.find(params[:category_id])\

\i\b When I say category I mean the category I am currently selecting
\i0\b0 \
subcategories = category.subcategories.find_all\

\i\b Find all the subcategories for the category I am currently selecting
\i0\b0 \
render json: \{ subcategories: subcategories\}\

\i\b When you render the json, subcategories in the json means the subcategories I just defined-the subcategories related to the category I am on right now
\i0\b0 \
end\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i\b \cf0 In short, subcategories in the json will refer to all the subcategories of the current category\
\
The JSON Said:\

\i0\b0 $(document).ready(function()\{\
  var getSubcategories = function(category_id)\

\i\b Get subcategories from their category id
\i0\b0 \
\{\
    var $subcategories = $('#listing_subcategory_id');\
    $($subcategories).empty();\
    
\b Find subcategories by category and category id
\b0 \
    $.post('/subcategories/find_by_category', \{ category_id: category_id \}, function(data)\{\
      $.each(data.subcategories, function(index, subcategory)\{\

\b index the subcategories for that category
\b0 \
        var option = $('<option />');\
        option.attr('value', subcategory.id);\
        option.text(subcategory.name);\
        option.appendTo($subcategories);\
      \});\

\b Just post the name of the subcategory
\b0 \
    \})\
  \};\
  \
  var getSelectedCategory = function()\{\
    return $('#listing_category_id').val();\
  \};\

\b When I select a category just list the subcategories
\b0 \
  \
  $('#listing_category_id').change(function()\{\
    var category_id = getSelectedCategory();\
    getSubcategories(category_id);\
  \});\
  \
  getSubcategories(getSelectedCategory());\
\});\
\

\b So basically, I will select a category, then show the subcategories related to that category.\
\

\b0 Then we rendered the json on the new page, and included it in the initializer, and also removed require tree, since we only want to render the javascript we\'92ve included on the various pages.\
\
We also needed a route where we matched the subcategories to find_by_category\
and then we posted to subcategories\
We want to get all that data and post it to our listings.js file\
\
We also included an options_for_select on the forms and gave an empty array.\
We did that because when we load that javascript file, all the values are loaded into that array\
\
You have to restart your server for things to work properly.\
\
In the javascript we are really just getting the category id so we can get all the subcategories based off of that id, then we are passing that value into our form, into an empty array\
\
We use the javascript include tag to include it\
We don\'92t want to load it on every page, so we remove tree from application.js\
And we have to precompile it so that it\'92s preloaded whenever we do use the form\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 18\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone We want it to show us the right listing if we go onto a category or subcategory\
\
We also need to include category_id and subcategory_id to our parameters now.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i\b \cf0 \
We want to redirect to @listing\

\b0 Now when we click on community, we want to see it\

\i0 \
Go to categories controller and in show, we are going to:\
\
def show\
@listings = Listing.where(category_id: params[:id])\
end\
This is saying the listings are where the category id matches what we click on\
\
Now go to category show page\
  <ul class="list-margin">\
    <% @listings.each do |listing| %>\
    <li>\
      <span>\
        <%= listing.created_at %>\
      </span> \
      <%= listing.title %> (<%= listing.city %>, <%= listing.province %>)\
    </li>\
    <% end %>\
  </ul>\
</div>\
\
Let\'92s fix the date.\
        <%= listing.created_at.strftime('%B %d, %Y') %>\
strftime does that and then %B %d, %Y show it in specific ways. This is a ruby method\
\
\
Also link to the listing:\
      <%= link_to listing.title, listing %> - (<%= listing.city %>, <%= listing.province %>)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 19\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone We are doing the same thing we just did for our subcategories\
\
Go to subcategories controller\
def show\
	@listings = Listing.where(subcategory_id: params[:id])\
end\
\
So now show on categories AND subcategories is working\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs54 \cf0 \ul LESSON 20\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0\fs28 \cf0 \ulnone This is where I am 
\i\b \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i0\b0 \cf0 \
\
\
\

\b QUESTIONS\

\b0 How do I remove a seed item from seeds.rb?\
\pard\pardeftab720\sl338

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
rake db:reset db:seed\
Go over lesson 17 again-adding javascript\
Understand the javascript in lesson 17\
\
\

\f2\b READ THIS:\
\pard\pardeftab720\sl400\sa210

\f3\b0\fs28 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Hello,\cb1 \
\cb5 I see that on routes you have put up,\cb1 \
\cb5 post '/subcategories/find_by_category', to: 'subcategories#find_by_category'\cb1 \
\cb5 -----------------------------\cb1 \
\cb5 I understand that 'subcategories#find_by_category is necessary because the method is in subcategories controller, but if i write above like this ---\cb1 \
\cb5 post '/anything_i_want/find_by_category', to: 'subcategories#find_by_category'\cb1 \
\cb5 why wouldn't it work? I am directing the route to the right controller and method, so shouldnt i be able to write whatever i want on the link name?\cb1 \
\cb5 Also, can you explain why this whole route is necessary and what it's doing? thank you so much Jay!!\cb1 \
\pard\pardeftab720\sl400
{\field{\*\fldinst{HYPERLINK "javascript:void(0)"}}{\fldrslt 
\fs26 \cf6 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Hide 2 replies }}
\fs26 \cf7 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'b7\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4  \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  Like\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4  \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'b7\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4  \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 Follow\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4  
\fs24 \cf9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 (2 followers) 
\fs26 \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'b7\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4  \
\pard\pardeftab720\sl400
\cf4 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl400
{\field{\*\fldinst{HYPERLINK "https://www.udemy.com/user/jaylee39/"}}{\fldrslt 
\b \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Jay Lee}}\cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  
\fs24 \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 \'b7 10 months ago
\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4  \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \'b7\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4  \
\pard\pardeftab720\sl400
\cf4 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl400

\fs28 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl400\sa210

\fs26 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For your first question, generally, you can put in whatever link you want and it should point to the subcategories#find_by_category method. But, if you look at the rest of this route, you'll notice that this is a post request (versus a Get like the other ones).\cb1 \
\cb5 So I went over this just a little in Lecture 17. It's being used on the listings/new.html.erb form. Basically, with Javascript, it'll go find the associated subcategories based on what you choose for the category. It'll make a post request to the route, hitting the find_by_category method to get the subcategories.\cb1 \
\cb5 This is a slightly more intermediate topic, so I didn't go over it too much. It's a bit out of scope of this project, which is why I provided the listings.js file.\cb1 \
\cb5 I wouldn't focus too much on trying to understand this part of the application, at least not yet. You can do a whole lot of things with Javascript and you can get lost in the syntax very quickly. Basically, this route is being used in the listings.js file to get the subcategories based off the category you select on the listings/new.html.erb form.\cb1 \
\cb5 Hopefully I didn't confuse you too much!\cb1 \
\
}